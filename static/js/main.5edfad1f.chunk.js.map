{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpensesFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","onChange","event","newFilter","target","value","onAddFilter","defaultFilter","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","console","log","title","amount","ExpensesList","filteredItems","length","map","item","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","expense","getMonth","Expenses","useState","selectedFilter","setSelectedFilter","filteredExpenses","items","filter","toString","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpense","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5edfad1f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  const classes = \"card \" + props.className;\r\n\r\n  // we add a \"classes\" constant which has card as a default class which is always applied,\r\n  // and props.className. So now anything we receive as a class name from outside is added to that string.\r\n  // So with that, we're now making sure that any value set on the class named prop is added to this long string of class names\r\n  // which is then finally set on the div inside of the card.\r\n\r\n  return <div className={classes}>{props.children}</div>;\r\n}\r\n// Children, is a reserved name and the value of this special children prop\r\n// will always be the content between the opening and closing tags of your custom component.\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nimport \"./ExpensesFilter.css\";\r\n\r\nfunction ExpensesFilter(props) {\r\n  function filterChangeHandler(event) {\r\n    const newFilter = event.target.value;\r\n    //   console.log(event.target.value);\r\n\r\n    props.onAddFilter(newFilter);\r\n  }\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select onChange={filterChangeHandler} value={props.defaultFilter}>\r\n          <option value=\"2023\">2023</option>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpensesFilter;\r\n","import React from \"react\";\r\nimport \"./ExpenseDate.css\";\r\n\r\nfunction ExpenseDate(props) {\r\n    const month = props.date.toLocaleString(\"en-US\", {month: \"long\"});\r\n    const day = props.date.toLocaleString(\"en-US\", {day: \"2-digit\"});\r\n    const year = props.date.getFullYear();\r\n\r\n\r\n  return (\r\n    <div className=\"expense-date\" >\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__year\">{day}</div>\r\n      <div className=\"expense-date__day\">{year}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseDate;\r\n","import React from \"react\";\r\nimport \"./ExpenseItem.css\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\n\r\nfunction ExpenseItem(props) {\r\n  console.log(\"ExpenseItem evaluated by react\");\r\n\r\n  return (\r\n    <li>\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </Card>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport \"./ExpensesList.css\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\nfunction ExpensesList(props) {\r\n  if (props.filteredItems.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">Found no expenses!</h2>;\r\n  }\r\n// we can use if statements like this, if the total thing that will be returned is to be changed based on a condition\r\n\r\n  return (\r\n    <div className=\"expenses-list\">\r\n      {props.filteredItems.map((item) => (\r\n      <ExpenseItem\r\n        key={item.id}\r\n        title={item.title}\r\n        amount={item.amount}\r\n        date={item.date}\r\n      />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpensesList;\r\n","import React from \"react\";\r\nimport \"./ChartBar.css\"\r\n\r\nfunction ChartBar(props) {\r\n let barFillHeight = \"0%\";\r\n\r\n if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value/props.maxValue) * 100) + \"%\";\r\n }\r\n\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div className=\"chart-bar__fill\" style={{height: barFillHeight}}></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartBar;\r\n","import React from \"react\";\r\nimport \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\n\r\nfunction Chart(props) {\r\n  // to calc maxValue we need to go through all the months and find the maximum value\r\n  // we can use Math.max() to find a max value, but it needs numbers(comma separated) as arguments, but what we have is array of objects (i.e chartDataPoints)\r\n  // we are interested in just one property of that object\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  // we MAP the dataPoints from objects to numbers(array of 12 dataPoint.values for the 12 months stored in const dataPointValues) as above\r\n\r\n  // array to numbers, by pulling them out using spread operator\r\n  const totalMaximum = Math.max(...dataPointValues);\r\n  // so this Math.max receives 12 arguments which are the 12 values for the months\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"../Chart/Chart\";\r\n\r\nfunction ExpensesChart(props) {\r\n  const chartDataPoints = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n\r\n  // go through filteredExpenses of a selected year, then sum up all expenses for a month and then assign that value to respective dataPoint(month)\r\n  // using for of loop\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); //viz 0 to 11 => January => 0\r\n    // we can use this month(as an index as chartDataPoints[expenseMonth]) to pick the right data point coz Jan has index 0, in the above array of datapoints too\r\n\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n    // here we update the value of a dataPoint through its index by adding the expense.amount to it\r\n  }\r\n  // therefore, after this for loop, the value of each data point won't be 0 anymore, but the sum of expenses for that month\r\n\r\n  return (\r\n    // now we pass the updated chartDataPoints to our Chart\r\n    <Chart dataPoints={chartDataPoints} />\r\n  );\r\n}\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from \"react\";\r\nimport \"./Expenses.css\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\n\r\nfunction Expenses(props) {\r\n  const [selectedFilter, setSelectedFilter] = useState(\"2020\");\r\n\r\n  function filterAddHandler(newFilter) {\r\n    setSelectedFilter(newFilter);\r\n    // console.log(newFilter);\r\n  }\r\n\r\n  const filteredExpenses = props.items.filter((item) => {\r\n    return item.date.getFullYear().toString() === selectedFilter;\r\n    // converting to string because state exists as string\r\n  });\r\n\r\n  return (\r\n    <Card className=\"expenses\">\r\n      <ExpensesFilter\r\n        defaultFilter={selectedFilter}\r\n        onAddFilter={filterAddHandler}\r\n      />\r\n      <ExpensesChart expenses={filteredExpenses} />\r\n      <ExpensesList filteredItems={filteredExpenses} />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\nfunction ExpenseForm(props) {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  // const [userInput, setUserInput] = useState({\r\n  //   enteredTitle: \"\",\r\n  //   enteredAmount: \"\",\r\n  //   enteredDate: \"\",\r\n  // });\r\n\r\n  function titleChangeHandler(event) {\r\n    setEnteredTitle(event.target.value);\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: event.target.value };\r\n    // });\r\n  }\r\n\r\n  function amountChangeHandler(event) {\r\n    setEnteredAmount(event.target.value);\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredAmount: event.target.value };\r\n    // });\r\n  }\r\n\r\n  function dateChangeHandler(event) {\r\n    setEnteredDate(event.target.value);\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredDate: event.target.value };\r\n    // });\r\n  }\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      // add + to convert this to number, to avoid getting very high values coz of string concatenation\r\n      date: new Date(enteredDate),\r\n    };\r\n    // console.log(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n    props.onSaveExpenseData(expenseData);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            onChange={titleChangeHandler}\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            onChange={amountChangeHandler}\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            onChange={dateChangeHandler}\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2023-12-31\"\r\n            value={enteredDate}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n        <button type=\"submit\">Add expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ExpenseForm;\r\n\r\n// rfce to get react function component export code\r\n\r\n// if isClicked is true - show form\r\n","import React, { useState } from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\n\r\nfunction NewExpense(props) {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  function saveExpenseDataHandler(enteredExpense) {\r\n    const expenseData = {\r\n      ...enteredExpense,\r\n      id: Math.random().toString()\r\n    };\r\n    // console.log(expenseData);\r\n    props.onAddExpense(expenseData);\r\n    setIsEditing(false);\r\n  }\r\n\r\n  function startEditingHandler() {\r\n    setIsEditing(true);\r\n  }\r\n\r\n  function stopEditingHandler() {\r\n    setIsEditing(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n    {/* ternary operator */}\r\n      {!isEditing ? (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      ) : (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewExpense;\r\n","import React, { useState } from \"react\";\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Tissue Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nfunction App() {\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n\n  function addExpenseHandler(expense) {\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    });\n  }\n\n  return (\n    <div>\n      {/* <h2>Let's get started!</h2> */}\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}